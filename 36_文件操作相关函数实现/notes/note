为实现文件和目录的创建、打开、读写操作，需要首先实现相关的基础函数。

一、实现inode相关的函数：fs/inode.c&h


二、实现文件相关函数：fs/file.c&h
    1.定义全局文件表(SFT)的表项：struct file
    2.定义全局文件表STF
    3.在文件表file_table[]中获取一个空闲元素，成功返回其下标，失败返回-1
    4.将3.中申请的file_table[]表项的下标安装到进程的fd_table[]中
    5.同步内存位图到硬盘

三、目录相关函数：
    1.打开分区根目录 \
    2.打开分区inode_no的目录
    3.在分区的指定目录pdir寻找名为name的目录或文件
        分析：目录在硬盘上属于文件，目录的inode中定义了寻址数据块的表项i_blocks[13],i_blocks[0-11]是直接块 i_blocks[12] 是一级间接块指针
        i_blocks[0-11]直接块指针指向一个硬盘上的数据块,i_blocks[12]为一级间接块索引表指针,指向一个一级索引块(我们的内核1扇区为1块),每个硬
        盘块可用四字节表示,因此该索引块可以指向512/4 = 128个一级块(指向128个数据块)，因此我们的文件系统最大支持的文件大小为(12 + 128)*512B。
        目录的目录项存储在这些i_blocks[]中指向的块(扇区)中,因此寻找pdir目录下的目录或文件，需要遍历这些数据块，在这些数据块检索名为name的文件。
    4.关闭目录
        分析：通过inode_close关闭(释放)目录的在内存中的inode。同时dir_open()打开目录时,该函数的
            struct dir* pdir = (struct dir*)sys_malloc(sizeof(struct dir))会为硬盘上的目录在内存分配内存空间并通过struct dir维护该目录,所以
            关闭目录时也应将内存中该目录的struct dir结构体释放
    5.在内存中初始化目录项
    6.将目录项p_de写入父目录parent_dir