一、文件描述符:
    传统unix系统中: 每个进程 都有一个文件描述符表(file descriptor table),被文件描述符索引fd(通常是非负整数)指向,
    而文件描述符表表项又做为 系统级(所有进程共享)文件表(system-wide file table) 的索引,文件表记录系统所有被打开的文件信息:
    文件的读写模式、文件偏移、该打开文件对应的硬盘上的inode索引等。
    每个unix进程的文件描述符表默认含有三个表项:
    Index	Name	<unistd.h> symbolic constant[1]	<stdio.h> file stream[2]
    0	Standard input	STDIN_FILENO	stdin
    1	Standard output	STDOUT_FILENO	stdout
    2	Standard error	STDERR_FILENO	stderr

    注:
    1.不同进程的文件描述符表的表项可指向系统文件表的同一个表项。
    2.系统文件表的不同表项可以指向inode表中的同一个inode(文件)


二、分析:
    1.每个进程都有一个文件描述符表,该表应该存储在进程的PCB中。
    2.需要在内存中定义系统(全局)文件表,记录所有已打开文件的信息。
    3.inode在硬盘中,打开文件时,若内存中没有该文件对应的inode应将inode写入内存作为缓存,
        当下次打开该文件时,先在内存中查找是否有该文件的inode(inode链表),若有,则不再读硬盘获取inode。
        我们在inode结构体中定义了struct list_elem inode_tag,通过该成员,将系统已打开的文件的inode在内存通过链表组织维护。

三、进程输入输出过程:
    进程通过系统调用向内核传递文件描述符,内核文件系统使用此文件描述符在该进程PCB的文件描述符数组中索引对应的表项,通过该表项
    获取对应系统(全局)文件表的表项结构(包含文件偏移、文件inode指针等信息),从该表项结构获取inode,最终找到文件的硬盘数据块。
    若该inode在inode链表队列不存在,文件系统将从硬盘将该inode加载到内核inode队列中,并将该inode地址赋给该文件表项的inode指针。

四、创建文件描述符过程:
    1.在全局inode队列新建一个inode,返回inode地址
    2.在全局文件表选择一空闲表项,初始化该表项结构,使表项结构的inode指针指向1中的inode地址
    3.在PCB中的文件描述符数组找一空闲表项,使该表项指向2中表项,即作为全局文件表索引。

    
五、实现文件描述符
    1.在PCB task_struct结构体添加文件描述符数组.
    2.线程初始化时初始化该表,为进程添加默认打开的三个表项:标准输入、标准输出、标准错误,表项分别为 0 1 2

